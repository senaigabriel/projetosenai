#include <Wire.h> // Biblioteca utilizada para fazer a comunicação com o I2C
#include <LiquidCrystal_I2C.h> // Biblioteca utilizada para fazer a comunicação com o display 20x4 

#define col 16 // Serve para definir o numero de colunas do display utilizado
#define lin  2 // Serve para definir o numero de linhas do display utilizado
#define ende  0x27 // Serve para definir o endereço do display.

LiquidCrystal_I2C lcd(ende,col,lin); // Chamada da funcação LiquidCrystal para ser usada com o I2C

#define A 6 // mini solenoide 1
#define B 7 // mini solenoide 2
#define C 2 // mini solenoide 3
#define D 3 // mini solenoide 4

#define led 5 //TESTAR LDR

#define buttonPin 4
int buttonState=0;
#define buttonClear 5
int buttonStateA=0;

int delayOne=1500; // Tempo de acionamento das solenoides
int delayTwo=300; // Tempo de espera até acionar a próxima solenoide

int limiteDisparo = 300; //Sensibilidade dos 



// Configuração dos snsores LDR
int sensorE = A0; //"fotoresistor (LDR) E"conectado ao pino anaógico 0
int sensorF = A1; //"fotoresistor (LDR) E"conectado ao pino anaógico 1
int sensorG = A2; //"fotoresistor (LDR) E"conectado ao pino anaógico 2
int sensorH = A3; //"fotoresistor (LDR) E"conectado ao pino anaógico 3

int sensorValueE = 0; //Armazena o valor de A0
int sensorValueF = 0; //Armazena o valor de A1
int sensorValueG = 0; //Armazena o valor de A2
int sensorValueH = 0; //Armazena o valor de A3

void setup()
{
  
  Serial.begin(9600); //Iniciar a comunicaçãoo seria com 9600 bits
  
  lcd.init(); // Serve para iniciar a comunicação com o display já conectado
  lcd.backlight(); // Serve para ligar a luz do display
  lcd.clear(); // Serve para limpar a tela do display
  
  pinMode(A, OUTPUT); //pin A configurado como saída (solenoide1)
  pinMode(B, OUTPUT); //pin B configurado como saída (solenoide2)
  pinMode(C, OUTPUT); //pin C configurado como saída (solenoide3)
  pinMode(D, OUTPUT); //pin D configurado como saída (solenoide4)
  
  pinMode(buttonPin, INPUT);
  
  pinMode(sensorE, INPUT); //Define o fotoresistor E como uma entrada
  pinMode(sensorF, INPUT); //Define o fotoresistor F como uma entrada
  pinMode(sensorG, INPUT); //Define o fotoresistor G como uma entrada
  pinMode(sensorH, INPUT); //Define o fotoresistor H como uma entrada
  
  pinMode(led, OUTPUT); //TESTAR LDR
  lcd.setCursor(0, 0);
  lcd.print(" Iniciar Teste");
  
  lcd.setCursor(0, 1);
  lcd.print("1  2  3  4  ");
}
void loop()
{
  
  buttonState=digitalRead(buttonPin);
  Serial.println(buttonState);
  buttonStateA=digitalRead(buttonClear); 

   if(buttonStateA==HIGH)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(" Iniciar Teste");
    lcd.setCursor(0, 1);
    lcd.print("1  2  3  4  ");  
  }
  
  if(buttonState==HIGH)//Se botão estiver em nível alto (HIGH)
  {
    Serial.print("sensorValueE: ");
    Serial.println(sensorValueE);
    Serial.print("sensorValueF: ");
    Serial.println(sensorValueF);
    Serial.print("sensorValueG: ");
    Serial.println(sensorValueG);
    Serial.print("sensorValueH: ");
    Serial.println(sensorValueH);
    delay(1000);
    
    lcd.setCursor(0, 0);
    lcd.print("Aguarde...      ");
    
    digitalWrite(A, HIGH); //Aciona solenoide 1
    delay(delayOne); //Tempo de acionamento solenoide 1
    sensorValueE = analogRead(sensorE); //lê o valor atual do sensor E
    lcd.setCursor(1, 1);
    if(sensorValueE > limiteDisparo)
    {
      lcd.print("P");
    }else{
      lcd.print("X");
    }
    
    digitalWrite(A, LOW); //desaciona solenoide 1
    delay(delayTwo); //Tempo de espera até acionar solenoide 2
    
    digitalWrite(B, HIGH); //Aciona solenoide 2
    delay(delayOne); //Tempo de acionamento solenoide 2
    sensorValueF = analogRead(sensorF); //lê o valor atual do sensor E
    lcd.setCursor(4, 1);
    if(sensorValueF > limiteDisparo)
    {
      lcd.print("P");
    }else{
      lcd.print("X");
    }
    digitalWrite(B,LOW); //desaciona solenoide 2
    delay(delayTwo); //Tempo de espera até acionar solenoide 3
    
    digitalWrite(C, HIGH); //Aciona solenoide 3
    delay(delayOne); //Tempo de acionamento solenoide 3
    sensorValueG = analogRead(sensorG); //lê o valor atual do sensor E
    lcd.setCursor(7, 1);
    if(sensorValueG > limiteDisparo)
    {
      lcd.print("P");
    }else{
      lcd.print("X");
    }
    digitalWrite(C,LOW); //desaciona solenoide 3
    delay(delayTwo); //Tempo de espera até acionar solenoide 4
    
    digitalWrite(D, HIGH); //Aciona solenoide 4
    delay(delayOne); //Tempo de acionamento solenoide 1
    sensorValueH = analogRead(sensorH); //lê o valor atual do sensor E
    lcd.setCursor(10, 1);
    if(sensorValueH > limiteDisparo)
    {
      lcd.print("P");
    }else{
      lcd.print("X");
    }
    digitalWrite(D,LOW); //desaciona solenoide 4
    delay(delayTwo); //Tempo de espera até acionar solenoide 1

     // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
    lcd.setCursor(13, 1);
    // Print a message to the LCD.
    lcd.print("Fim");
  }
  else // Caso contrário executar linhas abaixo
  {
     digitalWrite(A, LOW); //Solenoide 1 desaciona
     digitalWrite(B, LOW); //Solenoide 2 desaciona
     digitalWrite(C, LOW); //Solenoide 3 desaciona
     digitalWrite(D, LOW); //Solenoide 4 desaciona
  }

}
